name: ci

permissions: {} # No default permissions.

on:
  push:
    branches:
      - "**" # All branches
    tags:
      - v[0-9]+.[0-9]+.[0-9]+ # Release tags, e.g. v0.1.2
  pull_request:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1" # Make tools pretty.

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Run Set-VenvOutsideProject.ps1
        shell: pwsh
        run: ./scripts/Set-VenvOutsideProject.ps1 -VenvRootFolder /tmp

      - name: Run Bootstrap.ps1
        shell: pwsh
        run: ./scripts/Bootstrap.ps1

      - name: Run Update-PreCommitHooks.ps1
        shell: pwsh
        run: ./scripts/Update-PreCommitHooks.ps1

      - name: Run Build-Package.ps1
        # This runs because if the build backend is not specified in pyproject.toml,
        # it defaults to setuptools.build_meta.
        # The resulting sdist and wheel are almost empty.
        shell: pwsh
        run: ./scripts/Build-Package.ps1

      - name: Dry run Release-Project.ps1
        # Release-Project fails if not run from the master branch.
        if: (github.ref == 'refs/heads/master')
        shell: pwsh
        # Bootstrap.ps1 could have modified the lockfile, so we -AllowDirty.
        run: |
          ./scripts/Release-Project.ps1 -Bump patch -DryRun -AllowDirty

  package:
    name: Package
    needs: test
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.get-package-name.outputs.package_name }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Get package name
        id: get-package-name
        run: |
          version=$(git describe --always)
          package_name="scripts-$version"
          echo "package_name=$package_name" >> $GITHUB_OUTPUT

      - name: Zip and upload the package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-package-name.outputs.package_name }}
          path: |
            scripts
            LICENSE
            README.md

  github-release:
    name: GitHub release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: package
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download the package
        uses: actions/download-artifact@v5
        with:
          name: ${{ needs.package.outputs.package_name }}
          path: release/

      - name: Re-zip for release
        # Work around https://github.com/actions/upload-artifact/issues/426
        run: |
          pushd release
          zip -rv ../${{ needs.package.outputs.package_name }}.zip *
          popd

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          ${{ github.ref_name }}
          --repo ${{ github.repository }}
          --notes ''

      - name: Upload package to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          ${{ github.ref_name }}
          ${{ needs.package.outputs.package_name }}.zip
          --repo ${{ github.repository }}
